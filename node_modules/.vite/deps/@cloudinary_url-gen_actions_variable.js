import {
  Action,
  isString,
  toFloatAsString
} from "./chunk-ORXVEDXM.js";
import {
  Qualifier,
  QualifierValue
} from "./chunk-FKJU6Q2T.js";
import "./chunk-DC5AMYBS.js";

// node_modules/@cloudinary/transformation-builder-sdk/actions/variable/VariableAction.js
var VariableAction = class extends Action {
  constructor(name, value) {
    super();
    this.isFloat = false;
    this.isNumber = false;
    this.value = value;
    this.name = name;
  }
  /**
   * @description Converts the returned value to type float.
   */
  asFloat() {
    this.isFloat = true;
    return this;
  }
  /**
   * @description Converts the returned value to type number.
   */
  asInteger() {
    this.isNumber = true;
    return this;
  }
  prepareQualifiers() {
    let qualifierValue;
    if (this.isFloat) {
      qualifierValue = new QualifierValue([this.value, "to_f"]).setDelimiter("_");
    } else if (this.isNumber) {
      qualifierValue = new QualifierValue([this.value, "to_i"]).setDelimiter("_");
    } else {
      qualifierValue = new QualifierValue(this.value);
    }
    this.addQualifier(new Qualifier(`$${this.name}`, qualifierValue));
    return this;
  }
};
var VariableAction_default = VariableAction;

// node_modules/@cloudinary/transformation-builder-sdk/actions/variable/SetAction.js
var SetAction = class extends VariableAction_default {
  constructor(name, value, wrapper = "!") {
    let finalValue;
    const parsedValue = Array.isArray(value) ? value.join(":") : value;
    if (isString(parsedValue)) {
      finalValue = `${wrapper}${parsedValue.replace(/,/g, "%2C").replace(/\//g, "%2F").replace(/!/g, "%21")}${wrapper}`;
    } else {
      finalValue = parsedValue;
    }
    super(name, finalValue);
  }
};
var SetAction_default = SetAction;

// node_modules/@cloudinary/transformation-builder-sdk/actions/variable/SetAssetReferenceAction.js
var SetAssetReferenceAction = class extends VariableAction_default {
  constructor(name, value) {
    const parsedValue = value.replace(/\//g, ":");
    super(name, `ref:!${parsedValue}!`);
  }
};
var SetAssetReferenceAction_default = SetAssetReferenceAction;

// node_modules/@cloudinary/transformation-builder-sdk/actions/variable/SetFromContextAction.js
var SetFromContextAction = class extends VariableAction_default {
  constructor(name, value) {
    super(name, `ctx:!${value}!`);
  }
};
var SetFromContextAction_default = SetFromContextAction;

// node_modules/@cloudinary/transformation-builder-sdk/actions/variable/SetFromMetadataAction.js
var SetFromMetadataAction = class extends VariableAction_default {
  constructor(name, value) {
    super(name, `md:!${value}!`);
  }
};
var SetFromMetadataAction_default = SetFromMetadataAction;

// node_modules/@cloudinary/transformation-builder-sdk/actions/variable.js
function set(name, value) {
  if (Object.prototype.hasOwnProperty.call(value, "push")) {
    return new SetAction_default(name, value);
  }
  return new SetAction_default(name, value);
}
function setFloat(name, value) {
  return new SetAction_default(name, toFloatAsString(value), "");
}
function setInteger(name, value) {
  let val = value;
  if (typeof value === "string") {
    val = parseInt(value);
  }
  if (isNaN(val)) {
    val = 0;
  }
  return new SetAction_default(name, Math.round(val));
}
function setString(name, value) {
  return new SetAction_default(name, value.toString());
}
function setAssetReference(name, value) {
  return new SetAssetReferenceAction_default(name, value);
}
function setFromContext(name, value) {
  return new SetFromContextAction_default(name, value);
}
function setFromMetadata(name, value) {
  return new SetFromMetadataAction_default(name, value);
}
var Variable = {
  set,
  setFloat,
  setString,
  setInteger,
  setAssetReference,
  setFromContext,
  setFromMetadata
};
export {
  Variable,
  set,
  setAssetReference,
  setFloat,
  setFromContext,
  setFromMetadata,
  setInteger,
  setString
};
//# sourceMappingURL=@cloudinary_url-gen_actions_variable.js.map
