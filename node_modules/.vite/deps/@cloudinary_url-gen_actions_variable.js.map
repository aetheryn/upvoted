{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/actions/variable/VariableAction.js", "../../@cloudinary/transformation-builder-sdk/actions/variable/SetAction.js", "../../@cloudinary/transformation-builder-sdk/actions/variable/SetAssetReferenceAction.js", "../../@cloudinary/transformation-builder-sdk/actions/variable/SetFromContextAction.js", "../../@cloudinary/transformation-builder-sdk/actions/variable/SetFromMetadataAction.js", "../../@cloudinary/transformation-builder-sdk/actions/variable.js"],
  "sourcesContent": ["import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Defines an new user variable.\n * @memberOf Actions.Variable\n * @extends SDK.Action\n * @see Visit {@link Actions.Variable|Variable} for an example\n */\nclass VariableAction extends Action {\n    constructor(name, value) {\n        super();\n        this.isFloat = false;\n        this.isNumber = false;\n        this.value = value;\n        this.name = name;\n    }\n    /**\n     * @description Converts the returned value to type float.\n     */\n    asFloat() {\n        this.isFloat = true;\n        return this;\n    }\n    /**\n     * @description Converts the returned value to type number.\n     */\n    asInteger() {\n        this.isNumber = true;\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue;\n        if (this.isFloat) {\n            qualifierValue = new QualifierValue([this.value, 'to_f']).setDelimiter('_');\n        }\n        else if (this.isNumber) {\n            qualifierValue = new QualifierValue([this.value, 'to_i']).setDelimiter('_');\n        }\n        else {\n            qualifierValue = new QualifierValue(this.value);\n        }\n        this.addQualifier(new Qualifier(`$${this.name}`, qualifierValue));\n        return this;\n    }\n}\nexport default VariableAction;\n", "import { isString } from \"../../internal/utils/dataStructureUtils.js\";\nimport VariableAction from \"./VariableAction.js\";\n/**\n * @description Sets a user-defined variable.\n * @memberOf Actions.Variable\n * @extends Variable.VariableAction\n * @see Visit {@link Actions.Variable|Variable} for an example\n */\nclass SetAction extends VariableAction {\n    constructor(name, value, wrapper = '!') {\n        let finalValue;\n        const parsedValue = Array.isArray(value) ? value.join(':') : value;\n        if (isString(parsedValue)) {\n            /*\n             * Encoding needed to make the Variable value Cloudinary Safe\n             * If a string, we also determine what wrapper is used (wrapper variable)\n             * The wrapper variable is needed because floats are passed as strings ('1.0') - in those case\n             * we don't need to treat them as URL strings ($foo_!1.0!), but instead as foo_1.0\n             */\n            finalValue = `${wrapper}${parsedValue\n                .replace(/,/g, '%2C')\n                .replace(/\\//g, '%2F')\n                .replace(/!/g, '%21')}${wrapper}`;\n        }\n        else {\n            finalValue = parsedValue;\n        }\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(name, finalValue);\n    }\n}\nexport default SetAction;\n", "import VariableAction from \"./VariableAction.js\";\n/**\n * @description Sets a user-defined variable from a file reference.\n * @memberOf Actions.Variable\n * @extends {Variable.VariableAction}\n * @see Visit {@link Actions.Variable|Variable} for an example\n */\nclass SetAssetReferenceAction extends VariableAction {\n    constructor(name, value) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        const parsedValue = value\n            .replace(/\\//g, ':');\n        super(name, `ref:!${parsedValue}!`);\n    }\n}\nexport default SetAssetReferenceAction;\n", "import VariableAction from \"./VariableAction.js\";\n/**\n * @description Sets a user-defined variable from contextual metadata.\n * @memberOf Actions.Variable\n * @extends {Variable.VariableAction}\n * @see Visit {@link Actions.Variable|Variable} for an example\n */\nclass SetFromContextAction extends VariableAction {\n    constructor(name, value) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(name, `ctx:!${value}!`);\n    }\n}\nexport default SetFromContextAction;\n", "import VariableAction from \"./VariableAction.js\";\n/**\n * @description Sets a user-defined variable from structured metadata.\n * @memberOf Actions.Variable\n * @extends {Variable.VariableAction}\n * @see Visit {@link Actions.Variable|Variable} for an example\n */\nclass SetFromMetadataAction extends VariableAction {\n    constructor(name, value) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(name, `md:!${value}!`);\n    }\n}\nexport default SetFromMetadataAction;\n", "import SetAction from \"./variable/SetAction.js\";\nimport SetAssetReferenceAction from \"./variable/SetAssetReferenceAction.js\";\nimport SetFromContextAction from \"./variable/SetFromContextAction.js\";\nimport SetFromMetadataAction from \"./variable/SetFromMetadataAction.js\";\nimport { toFloatAsString } from \"../internal/utils/toFloatAsString.js\";\n/**\n * Defines a new user variable with the given value.\n * @memberOf Actions\n * @namespace Variable\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\n * import {\n *  set,\n *  setAssetReference,\n *  setFromContext,\n *  setFromMetadata\n * } from \"@cloudinary/url-gen/actions/variable\";\n * import {scale} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n *\n * const image = yourCldInstance.image('woman');\n * image\n *  .addVariable(set('foo1', 100))\n *  .addVariable(setAssetReference('foo2', 'val'))\n *  .addVariable(setFromContext('foo3', 'val'))\n *  .addVariable(setFromMetadata('foo4', 'val'))\n *  .resize(scale().width('$foo1').height('$foo2'))\n */\n/**\n * @summary action\n * @description Sets a new user variable with the given value.\n * @memberOf Actions.Variable\n * @param {string} name Variable name\n * @param {number | string | number[] | string[]} value Variable value\n * @return {Actions.Variable.SetAction}\n */\nfunction set(name, value) {\n    if (Object.prototype.hasOwnProperty.call(value, 'push')) {\n        return new SetAction(name, value);\n    }\n    return new SetAction(name, value);\n}\n/**\n * @summary action\n * @description Same as 'set', but forces the end value to be a float  setFloat(1) will result in $foo_1.0\n * @memberOf Actions.Variable\n * @param {string} name Variable name\n * @param {number} value Variable value\n * @return {Actions.Variable.SetAction}\n */\nfunction setFloat(name, value) {\n    return new SetAction(name, toFloatAsString(value), '');\n}\n/**\n * @summary action\n * @description Same as 'set', but forces the end value to be an integer setInteger(1.1) will result in $foo_1, input is rounded down\n * @memberOf Actions.Variable\n * @param {string} name Variable name\n * @param {number} value Variable value\n * @return {Actions.Variable.SetAction}\n */\nfunction setInteger(name, value) {\n    let val = value;\n    if (typeof value === 'string') {\n        val = parseInt(value);\n    }\n    if (isNaN(val)) {\n        val = 0;\n    }\n    return new SetAction(name, Math.round(val));\n}\n/**\n * @summary action\n * @description Same as 'set', but forces the end value to be a string setString(1) will result in $foo_!1!\n * @memberOf Actions.Variable\n * @param {string | number} name Variable name\n * @param {number} value Variable value\n * @return {Actions.Variable.SetAction}\n */\nfunction setString(name, value) {\n    return new SetAction(name, value.toString());\n}\n/**\n * @summary action\n * @description Allows adding a variable by sending a key and value which is a reference to an asset.\n * @memberOf Actions.Variable\n * @param {string} name\n * @param {string} value\n * @return {Actions.Variable.SetAssetReferenceAction}\n */\nfunction setAssetReference(name, value) {\n    return new SetAssetReferenceAction(name, value);\n}\n/**\n * @summary action\n * @description Allows adding a variable by sending a key and value which is a key to a value that assumed to be on\n * the asset’s context.\n * @memberOf Actions.Variable\n * @param {string} name\n * @param {string} value\n * @return {Actions.Variable.SetFromContextAction}\n */\nfunction setFromContext(name, value) {\n    return new SetFromContextAction(name, value);\n}\n/**\n * @summary action\n * @description Allows adding a variable by sending a name and value which is a key to a value that assumed to be on\n * the predefined account’s metadata fields.\n * @memberOf Actions.Variable\n * @param {string} name\n * @param {string} value\n * @return {Actions.Variable.SetFromMetadataAction}\n */\nfunction setFromMetadata(name, value) {\n    return new SetFromMetadataAction(name, value);\n}\nconst Variable = {\n    set,\n    setFloat,\n    setString,\n    setInteger,\n    setAssetReference,\n    setFromContext,\n    setFromMetadata\n};\nexport { set, setFloat, setString, setInteger, setAssetReference, setFromContext, setFromMetadata, Variable };\n"],
  "mappings": "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",
  "names": []
}
